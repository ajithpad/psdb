#Generate the firing pattern of psdb neurons

import sys
sys.path.insert(0,'/bcfgrid/data/vlachos/nest/nest_bin/lib/python2.6/site-packages')
import nest
import numpy as np
import pylab as pl
import matplotlib

spiking_mode_loop = ['regular_spiking','fast_spiking', 'chattering']
#spiking_mode_loop = np.array([1.,3.,5.])
fig = pl.figure(1,(8,8))
#ax = fig.add_axes([0.55,0.2,0.33,0.7])
#ax = fig.add_subplot(111)	
#ax.set_xlabel('Time (ms)')
#ax.set_ylabel('Membrane potential (mV)')
labelsize = 14
ticksize = 14
col_lis = ['b','g','r']
for i,spiking_mode in enumerate(spiking_mode_loop):
	file_name_sd = spiking_mode+'_sd'
	file_name_mem = spiking_mode+'_vm'
	nest.ResetKernel()
	nest.SetKernelStatus({'resolution':0.01, 'overwrite_files': True})
	T = 1000.
	neuron = nest.Create('ssbn')	    
	if spiking_mode == 'regular_spiking':
	    nest.SetStatus([1],{'max_spb':4.,
	                        'act_state':0.2
				})
			  
	elif spiking_mode == 'fast_spiking':
	    nest.SetStatus([1],{'max_spb':4.,
	                        'act_state':1.2

				})
	elif spiking_mode == 'chattering':
	    nest.SetStatus([1],{'max_spb':4.,
	                        'act_state':15.

				})
				
	dc_gen = nest.Create('dc_generator',params = {'amplitude': 500. ,'start':0., 'stop': 2000.})
	sd = nest.Create('spike_detector', params = {'to_file': True, 'label':file_name_sd})
	vm = nest.Create('voltmeter',params = {'interval':0.01})
	nest.SetStatus(vm,[{"withtime": True, 'to_file' : True, 'label':file_name_mem}])

	nest.DivergentConnect(dc_gen,neuron, weight = 1.0, delay = 1.0)
	nest.Connect(vm,neuron)
	nest.Connect(neuron,sd)
	nest.Simulate(T)
	spikes = nest.GetStatus(sd,'events')[0]
	potential = nest.GetStatus(vm, 'events')[0]
	ax1 = fig.add_axes([0.1,0.8 - (i*0.125),0.33,0.1])
	#ax1 = fig.add_axes([0.6,0.66 - (i*0.22),0.37,0.2]) 
	ax1.plot(potential['times'],potential['V_m'],col_lis[i], linewidth = 2)
	ax1.plot(spikes['times'],spikes['senders']-50.,"ko",markersize = 3)
	yr = np.arange(-80.,-40.,10.)
	ax1.set_yticks(yr[::3])
	for tl in ax1.get_yticklabels():
	  tl.set_fontsize(ticksize)
	#if i == 0:
	  #ax1.title('Regular Spiking', fontsize = 50)
	#elif i == 1:
	  #ax1.title('Bursting', fontsize = 50)
	ax1.set_xlim(150,350)
	if i != 2:
	   ax1.tick_params(axis = 'x', bottom = 'off', labelbottom = 'off', top = 'off')
	else:  
	   xr = np.arange(200,401,20.)
	   ax1.set_xticks(xr[1::2])
	   for tl1 in ax1.get_xticklabels():
	    tl1.set_fontsize(ticksize)
	   ax1.set_xlabel('Time (ms)',fontsize = labelsize)
	if i == 1:
	  ax1.set_ylabel('Membrane Potential (mV)', fontsize = labelsize)
	
	ax1.tick_params(axis = 'both', which = 'both',top = 'off', right = 'off')
	if i == 0:
	  ax1.text(120,-40,'A',fontsize = labelsize + 3, style = 'normal')
pl.show()